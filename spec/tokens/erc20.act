contract ERC20 {

  // --- state ---

  layout {
    string name
    string symbol
    uint256 totalSupply
    mapping(address => uint) balanceOf
    mapping(address => mapping(address => uint)) allowance
    mapping(address => bool) wards
  }

  func constructor(_symbol: string, _name: string) {
    storage {
      name        <- _name
      symbol      <- _symbol
      totalSupply <- 0
      balanceOf   <- []
      allowance   <- []
      wards       <- [CALLER := true]
    }
  }

  // --- erc20 ---

  fn transfer(dst: address, amt: uint256) -> bool {
    case CALLER == to {
      iff inrange(uint256, balanceOf[CALLER] - amt)
      returns true
    }
    case CALLER =/= to {
      move(src, dst, amt)
      returns true
    }
  }

  fn transferFrom(src: address, dst: address, amt: uint) -> bool {
    case src == dst {
      iff inrange(uint256, balanceOf[src] - amt)
      returns true
    }
    case src =/= dst and CALLER == src {
      storage {
        balanceOf[src] <- balanceOf[src] - amt
        balanceOf[dst] <- balanceOf[dst] + amt
      }
      returns true
    }
    case src =/= dst and CALLER =/= src and allowance[src][CALLER] == MAX_UINT {
      storage {
        balanceOf[src] <- balanceOf[src] - amt
        balanceOf[dst] <- balanceOf[dst] + amt
      }
      returns true
    }
    case src =/= dst and CALLER =/= src and allowance[src][CALLER] < MAX_UINT {
      storage {
        allowance[src][CALLER] <- allowance[src][CALLER] - amt
        balanceOf[src] <- balanceOf[src] - amt
        balanceOf[dst] <- balanceOf[dst] + amt
      }
      returns true
    }
  }

  func approve(usr: address, amt: uint) -> bool {
    storage allowance[msg.sender][usr] = amt
    returns true
  }

  // --- admin ---

  func mint(usr: address, amt: uint) {
    iff wards[usr]
    storage {
      balanceOf[usr] <- balanceOf[usr] + amt
      totalSupply    <- totalSupply + amt
    }
  }

  func burn(usr: address, amt: uint) {
    iff wards[msg.sender] || usr == msg.sender
    storage {
      balanceOf[usr] <- balanceOf[usr] - amt
      totalSupply    <- totalSupply - amt
    }
  }

  // --- auth ---

  func rely(usr: address) {
    iff wards[msg.sender]
    storage wards[usr] <- true
  }

  func deny(usr: address) {
    iff wards[msg.sender]
    storage wards[usr] <- false
  }
}
